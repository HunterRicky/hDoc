由于Cocos2d-x引擎专注服务于2D游戏开发工作，所以在其使用逻辑上与一般的程序开发逻辑有着很大的不同。其内部概念来自于影视创作，将游戏的整个执行流程浓缩为剧本形式，并按层和节点关系管理程序内的实体[]。
Cocos2d-x游戏引擎将所有将会显示在交互屏幕上的内容实体都进行的对象化的表示，其中对象主要包括以下几个分类。

1.	导演类---Director
导演类用于管理游戏中的多个场景对象，扮演整个游戏导航员的角色。其主要负责游戏程序启动时的初始化工作和退出游戏后的释放工作，在游戏需要进行场景级别的操作时，其会引导游戏场景进行切换、暂停、恢复等操作。此外，导演类还可以帮助游戏访问部分系统信息。在该游戏引擎中导演类采用单例模式来实现，因此一个游戏实体中只存在一个导演实体[]。
2.	场景类---Scene
类似电影中的不同场景，场景类是容纳显示屏幕上各类视觉元素的容器。游戏中通过不同场景实体的切换来进行游戏画面、菜单等视觉画面的切换。
3.	层类---Layer
Cocos2d-x中的层是实现游戏内容的重要容器，开发者通过将多个层实体叠加在一个场景中来创建丰富的视觉画面。层是对场景内元素布局的细化，用以将视觉元素分类，从而方便管理，减少多个类别之间的影响。
4.	精灵类---Sprite
精灵是游戏中内容的主要载体。精灵对象总是与一个精灵帧对象或纹理对象绑定。引擎在进行图形渲染时，实际上是把与精灵对象绑定的图像资源按照设定的属性来进行渲染并显示在屏幕上[]。精灵类提供了关于图像的众多交互性操作，包括多种运动、形变、事件管理和交互方式。游戏内用精灵类实现的元素包括游戏的内容元素实体、菜单元素实体等。因此大部分对于视觉元素的控制与管理实际上是对精灵实体的操作。
5.	节点类---Node
节点是上文提到的除导演类外其他可见元素类的基础类，包括场景、层、精灵和菜单元素在内的所有视觉元素都继承自节点类。其作为一个公共抽象，主要封装了与视觉元素相关基本属性和方法，并且带有一个随着节点实体生命周期工作的调度器[]。节点实体都可以进行动作，并且可以包含任意的子节点。
在Cocos2d-x中通过节点的树形层级来渲染视觉元素。渲染时从根节点也就是场景节点向下进行遍历和渲染，根节点的视觉元素将被子节点的视觉元素覆盖。
